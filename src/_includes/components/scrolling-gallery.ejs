<!-- Scrolling Gallery Component -->
<div class="scrolling-gallery-container" 
     data-height="<%= locals.gallery_height || '300px' %>"
     data-max-width="<%= locals.maxWidth || 'small' %>">
  <div class="scrolling-gallery-track">
    <% if (locals.gallery_content && gallery_content.length > 0) { %>
      <!-- Render media items twice for seamless looping -->
      <% for (let loop = 0; loop < 2; loop++) { %>
        <% gallery_content.forEach((media, index) => { %>
          <% 
            // Calculate aspect ratio and determine width class
            let aspectRatio = 1; // Default to square
            let aspectClass = 'aspect-square';
            
            if (media.width && media.height && media.width > 0 && media.height > 0) {
              aspectRatio = media.width / media.height;
              
              if (aspectRatio > 2.5) {
                aspectClass = 'aspect-very-wide';
              } else if (aspectRatio > 1.6) {
                aspectClass = 'aspect-wide';
              } else if (aspectRatio > 1.2) {
                aspectClass = 'aspect-landscape';
              } else if (aspectRatio < 0.8) {
                aspectClass = 'aspect-portrait';
              }
              // else remains aspect-square for ratios between 0.8 and 1.2
            } else {
              // Fallback: try to determine aspect ratio from video vs image type
              if (media.mime && media.mime.startsWith('video/')) {
                // Most videos are landscape, assume 16:9
                aspectRatio = 1.78;
                aspectClass = 'aspect-wide';
              }
              // Images without dimensions default to square
            }
          %>
          <div class="scrolling-gallery-item <%= aspectClass %>" 
               data-media-id="<%= media.id || index %>"
               data-media-type="<%= media.mime ? (media.mime.startsWith('video/') ? 'video' : 'image') : 'image' %>"
               data-aspect-ratio="<%= aspectRatio %>">
            <% if (media.mime && media.mime.startsWith('video/')) { %>
              <!-- Video panel -->
              <div class="scrolling-gallery-media">
                <video muted preload="metadata">
                  <source src="<%= media.url %>" type="<%= media.mime %>">
                </video>
                <div class="video-play-overlay">
                  <div class="play-icon"></div>
                </div>
              </div>
            <% } else { %>
              <!-- Image panel -->
              <div class="scrolling-gallery-media">
                <img src="<%= media.url %>" 
                     alt="<%= media.alternativeText || media.name || 'Gallery image' %>" 
                     loading="lazy">
              </div>
            <% } %>
            
            <!-- Hidden data for hover infobox -->
            <div class="scrolling-gallery-data" style="display: none;">
              <div class="media-url"><%= media.url %></div>
              <div class="media-caption"><%= media.caption || '' %></div>
              <div class="media-type"><%= media.mime ? (media.mime.startsWith('video/') ? 'video' : 'image') : 'image' %></div>
              <div class="media-name"><%= media.name || '' %></div>
            </div>
          </div>
        <% }); %>
      <% } %>
    <% } else { %>
      <div class="scrolling-gallery-empty">No media content available</div>
    <% } %>
  </div>
</div>

<!-- Render the hover infobox once outside the loop -->
<%- include('./hover_infobox', { 
  id: 'hover-infobox-scrolling',
  image: '',
  title: '',
  description: '',
  url: '#',
  showImage: false,
  iconType: 'font-awesome',
  iconClass: 'fas fa-expand-arrows-alt',
  maxWidth: 'medium'
}) %>

<!-- Include the reusable lightbox -->
<%- include('./lightbox', { id: 'scrolling-gallery-lightbox' }) %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector('.scrolling-gallery-container');
  if (!container) return;

  const track = container.querySelector('.scrolling-gallery-track');
  const items = track.querySelectorAll('.scrolling-gallery-item');
  const infobox = document.getElementById('hover-infobox-scrolling');
  const lightbox = document.getElementById('scrolling-gallery-lightbox');
  
  if (!track || items.length === 0) return;

  // Set container height and CSS custom property
  const height = container.dataset.height || '300px';
  container.style.height = height;
  
  // Function to update CSS custom property based on current height
  function updateGalleryHeight() {
    const currentHeight = container.offsetHeight;
    container.style.setProperty('--gallery-height', currentHeight + 'px');
    
    // Recalculate total width when height changes (affects aspect ratio widths)
    setTimeout(() => {
      let newTotalWidth = 0;
      items.forEach(item => {
        newTotalWidth += item.offsetWidth;
      });
      halfWidth = newTotalWidth / 2; // Update the halfWidth variable
      track.style.width = newTotalWidth + 'px';
      
      // Reset scroll position if needed
      if (scrollPosition >= halfWidth) {
        scrollPosition = 0;
      }
    }, 100); // Small delay to allow CSS to update
  }
  
  // Set initial CSS custom property
  updateGalleryHeight();
  
  // Update on window resize to handle responsive changes
  let resizeTimeout;
  function handleResize() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(updateGalleryHeight, 150); // Debounce resize events
  }
  window.addEventListener('resize', handleResize);

  // Calculate initial total width for seamless scrolling
  let totalWidth = 0;
  items.forEach(item => {
    totalWidth += item.offsetWidth;
  });
  
  // Set track width to half the total (since we duplicate items)
  let halfWidth = totalWidth / 2;
  track.style.width = totalWidth + 'px';

  let isScrolling = true;
  let scrollPosition = 0;
  let animationId;

  // Scrolling animation
  function animate() {
    if (!isScrolling) return;

    scrollPosition += 0.5; // Scroll speed
    
    // Reset position when we've scrolled through half the content
    if (scrollPosition >= halfWidth) {
      scrollPosition = 0;
    }
    
    track.style.transform = `translateX(-${scrollPosition}px)`;
    animationId = requestAnimationFrame(animate);
  }

  // Start animation
  animate();

  // Hover functionality
  if (infobox) {
    const infoboxImage = infobox.querySelector('.infobox-image img');
    const infoboxTitle = infobox.querySelector('.infobox-title');
    const infoboxDescription = infobox.querySelector('.infobox-description');
    const infoboxButton = infobox.querySelector('.infobox-go-button');

    items.forEach(item => {
      item.addEventListener('mouseenter', function(e) {
        // Pause scrolling
        isScrolling = false;
        if (animationId) {
          cancelAnimationFrame(animationId);
        }

        // Darken other items
        container.classList.add('has-hovered-item');
        item.classList.add('is-hovered');

        // Configure infobox for this specific gallery type
        if (infobox) {
          infobox.dataset.iconType = 'font-awesome';
          const iconElement = infobox.querySelector('.infobox-go-button i');
          if (iconElement) {
            iconElement.className = 'fas fa-expand-arrows-alt'; // Set Font Awesome expand arrows icon
          }
          const contentBox = infobox.querySelector('.infobox-content');
          if (contentBox) {
            contentBox.classList.remove('no-title'); // Ensure no-title styling is removed
          }
        }

        // Get media data
        const dataDiv = item.querySelector('.scrolling-gallery-data');
        if (!dataDiv) return;

        const mediaUrl = dataDiv.querySelector('.media-url')?.textContent || '';
        const mediaCaption = dataDiv.querySelector('.media-caption')?.textContent || '';
        const mediaType = dataDiv.querySelector('.media-type')?.textContent || 'image';
        const mediaName = dataDiv.querySelector('.media-name')?.textContent || '';
        const mediaAlt = item.querySelector('.scrolling-gallery-media img')?.alt || '';

        // Show infobox only if there's a caption
        if (mediaCaption.trim()) {
          if (infoboxImage) infoboxImage.src = ''; // No image preview for scrolling gallery
          if (infoboxTitle) infoboxTitle.textContent = mediaAlt || mediaName; // Use Alt text as title
          if (infoboxDescription) infoboxDescription.textContent = mediaCaption; // Use caption as description

          // Position infobox at cursor coordinates
          const infoboxContent = infobox.querySelector('.infobox-content');
          if (infoboxContent) {
            const offsetX = infoboxContent.offsetLeft;
            const offsetY = infoboxContent.offsetTop;
            infobox.style.left = (e.clientX - offsetX) + 'px';
            infobox.style.top = (e.clientY - offsetY) + 'px';
          } else {
            infobox.style.left = e.clientX + 'px';
            infobox.style.top = e.clientY + 'px';
          }
          infobox.style.display = 'block';
          
          // Add bouncy animation
          infobox.classList.remove('animate-in');
          setTimeout(() => infobox.classList.add('animate-in'), 10);
        }
      });

      item.addEventListener('mouseleave', function() {
        // Resume scrolling
        isScrolling = true;
        animate();

        // Remove hover styles
        container.classList.remove('has-hovered-item');
        item.classList.remove('is-hovered');

        // Hide infobox and remove animation
        if (infobox) {
          infobox.style.display = 'none';
          infobox.classList.remove('animate-in');
        }
      });

      // Click handler for lightbox
      item.addEventListener('click', function() {
        const dataDiv = item.querySelector('.scrolling-gallery-data');
        if (!dataDiv) return;

        const mediaUrl = dataDiv.querySelector('.media-url')?.textContent || '';
        const mediaType = dataDiv.querySelector('.media-type')?.textContent || 'image';
        const mediaName = dataDiv.querySelector('.media-name')?.textContent || '';
        const mediaCaption = dataDiv.querySelector('.media-caption')?.textContent || '';
        const mediaAlt = item.querySelector('.scrolling-gallery-media img')?.alt || '';

        openLightbox(mediaUrl, mediaType, mediaAlt, mediaCaption);
      });
    });

    // Mouse move for infobox positioning
    document.addEventListener('mousemove', function(e) {
      if (infobox && infobox.style.display !== 'none') {
        const infoboxContent = infobox.querySelector('.infobox-content');
        if (infoboxContent) {
          const offsetX = infoboxContent.offsetLeft;
          const offsetY = infoboxContent.offsetTop;
          infobox.style.left = (e.clientX - offsetX) + 'px';
          infobox.style.top = (e.clientY - offsetY) + 'px';
        } else {
          infobox.style.left = e.clientX + 'px';
          infobox.style.top = e.clientY + 'px';
        }
      }
    });
  }

  // Lightbox functionality
  function openLightbox(url, type, title, caption) {
    if (!lightbox) return;

    const mediaContainer = lightbox.querySelector('.lightbox-media-container');
    const titleElement = lightbox.querySelector('.lightbox-title');
    const captionElement = lightbox.querySelector('.lightbox-caption');
    
    if (!mediaContainer) return;

    // Clear previous content
    mediaContainer.innerHTML = '';

    if (type === 'video') {
      const video = document.createElement('video');
      video.src = url;
      video.controls = true;
      video.autoplay = true;
      video.className = 'lightbox-video';
      mediaContainer.appendChild(video);
    } else {
      const img = document.createElement('img');
      img.src = url;
      img.alt = title;
      img.className = 'lightbox-image';
      // Determine and set orientation
      img.onload = () => {
        if (img.naturalWidth > img.naturalHeight) {
          img.dataset.orientation = 'landscape';
        } else if (img.naturalWidth < img.naturalHeight) {
          img.dataset.orientation = 'portrait';
        } else {
          img.dataset.orientation = 'square';
        }
      };
      mediaContainer.appendChild(img);
    }

    // Set title and caption (alt text as title, caption as description)
    if (titleElement) titleElement.textContent = title || '';
    if (captionElement) captionElement.textContent = caption || '';

    lightbox.style.display = 'flex';
    setTimeout(() => lightbox.classList.add('show'), 10);
    document.body.classList.add('lightbox-active');
  }

  function closeLightbox() {
    if (!lightbox) return;
    
    lightbox.classList.remove('show');
    setTimeout(() => {
    lightbox.style.display = 'none';
    document.body.classList.remove('lightbox-active');

    // Stop any videos
    const videos = lightbox.querySelectorAll('video');
    videos.forEach(video => {
      video.pause();
      video.currentTime = 0;
    });
    }, 300);
  }

  // Lightbox close handlers
  if (lightbox) {
    const closeBtn = lightbox.querySelector('.lightbox-close');
    const overlay = lightbox.querySelector('.lightbox-overlay');

    if (closeBtn) {
      closeBtn.addEventListener('click', closeLightbox);
    }
    
    if (overlay) {
      overlay.addEventListener('click', closeLightbox);
    }

    // ESC key to close
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && lightbox.style.display !== 'none') {
        closeLightbox();
      }
    });
  }
});
</script> 