<!-- Masonry Gallery Component -->
<div class="masonry-gallery <%= locals.className ? className : '' %> <%= locals.variedColumns ? 'masonry-varied' : '' %>"
     data-offset-min="<%= locals.offsetMin || 0 %>"
     data-offset-max="<%= locals.offsetMax || 50 %>">
  <div class="masonry-grid">
    <% if (locals.posts && posts.length > 0) { %>
      <% posts.forEach(post => { %>
        <% 
          let aspectRatio = 'default-aspect';
          // Use header image dimensions for aspect ratio calculation
          if (post.data.headerImageWidth && post.data.headerImageHeight) {
            const ratio = post.data.headerImageHeight / post.data.headerImageWidth;
            if (ratio < 0.8) aspectRatio = 'wide-aspect';
            else if (ratio > 1.2) aspectRatio = 'tall-aspect';
            if (ratio > 2) aspectRatio += ' very-tall-aspect';
            else if (ratio < 0.5) aspectRatio += ' very-wide-aspect';
          }
        %>
        <div class="masonry-item <%= aspectRatio %>" data-post-id="<%= post.id %>" data-scroll-animation="fade-up">
          <a href="<%= post.url %>" class="masonry-item-link">
            <% if (post.data.previewImage) { %>
              <div class="masonry-item-image">
                <img src="<%= post.data.previewImage || post.data.previewImageMedium %>" alt="<%= post.data.title %>" loading="lazy"/>
              </div>
            <% } else if (post.data.headerImage) { %>
              <div class="masonry-item-image">
                <img src="<%= post.data.headerImage || post.data.headerImageMedium %>" alt="<%= post.data.title %>" loading="lazy"/>
              </div>
            <% } else if (post.data.images && post.data.images.length > 0 && (post.data.images[0].url || post.data.images[0].medium) ) { %>
              <!-- Fallback to first gallery image if no preview/header -->
              <div class="masonry-item-image">
                <img src="<%= post.data.images[0].url || post.data.images[0].medium %>" alt="<%= post.data.title %>" loading="lazy"/>
              </div>
            <% } %>
            <div class="masonry-item-overlay">
              <h3 class="masonry-item-title"><%= post.data.title %></h3>
            </div>
          </a>
          <div class="masonry-item-data" style="display: none;">
            <div class="post-image"><%= post.data.previewImage || post.data.headerImage || ((post.data.images && post.data.images.length > 0) ? (post.data.images[0].url || post.data.images[0].medium) : '') %></div>
            <div class="post-title"><%= post.data.title %></div>
            <div class="post-description"><%= post.data.description || '' %></div>
            <div class="post-url"><%= post.url %></div>
            <div class="post-all-images" data-images='<%= JSON.stringify((post.data.images || []).map(img => img.url || img.medium).filter(Boolean)) %>'></div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="masonry-empty">No posts available to display</div>
    <% } %>
  </div>
</div>

<!-- Render the hover infobox once outside the loop -->
<%- include('./hover_infobox', { 
  id: 'hover-infobox-masonry',
  image: '',
  title: '',
  description: '',
  url: '#',
  showImage: true,
  iconType: 'font-awesome',
  iconClass: 'fas fa-arrow-right',
  maxWidth: 'large'
}) %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const infobox = document.getElementById('hover-infobox-masonry');
  if (!infobox) return; 

  const infoboxImage = infobox.querySelector('.infobox-image img');
  const infoboxTitle = infobox.querySelector('.infobox-title');
  const infoboxDescription = infobox.querySelector('.infobox-description');
  const infoboxButton = infobox.querySelector('.infobox-go-button');
  const masonryGallery = document.querySelector('.masonry-gallery');
  
  if (!infoboxImage || !infoboxTitle || !infoboxDescription || !infoboxButton || !masonryGallery) {
    console.error('One or more critical infobox or gallery elements not found');
    return;
  }
  
  infobox.style.display = 'none';
  
  let currentImageIndex = 0;
  let allPostImages = []; 
  let imageInterval = null;
  const cycleDelay = 900; // reduced from 750ms

  function startImageCycling() {
    if (imageInterval) {
      clearInterval(imageInterval);
      imageInterval = null;
    }
    
    if (allPostImages && allPostImages.length > 0) {
      currentImageIndex = 0;
      if (infoboxImage && allPostImages[currentImageIndex]) {
         infoboxImage.src = allPostImages[currentImageIndex];
      } else if (infoboxImage) {
         infoboxImage.src = ''; // Clear if image URL is bad or missing
      }

      if (allPostImages.length > 1) { 
        imageInterval = setInterval(() => {
          currentImageIndex = (currentImageIndex + 1) % allPostImages.length;
          if (infoboxImage && allPostImages[currentImageIndex]) {
            infoboxImage.src = allPostImages[currentImageIndex];
          } else if (infoboxImage) {
            infoboxImage.src = ''; 
          }
        }, cycleDelay);
      }
    }
  }
  
  function stopImageCycling() {
    if (imageInterval) {
      clearInterval(imageInterval);
      imageInterval = null;
    }
  }

  document.addEventListener('mousemove', function(e) {
    if (infobox.style.display !== 'none') {
      // Position the infobox at cursor coordinates
      infobox.style.left = e.clientX + 'px';
      infobox.style.top = e.clientY + 'px';
    }
  });

  const masonryItems = document.querySelectorAll('.masonry-item');
  masonryItems.forEach(item => {
    item.addEventListener('mouseenter', function(e) {
      // Configure infobox for this specific gallery type
      if (infobox) {
        infobox.dataset.iconType = 'font-awesome';
        const iconElement = infobox.querySelector('.infobox-go-button i');
        if (iconElement) {
          iconElement.className = 'fas fa-arrow-right'; // Set Font Awesome arrow icon
        }
        const contentBox = infobox.querySelector('.infobox-content');
        if (contentBox) {
          contentBox.classList.remove('no-title'); // Ensure no-title styling is removed
        }
      }

      const dataDiv = this.querySelector('.masonry-item-data');
      if (!dataDiv) return;
      
      const fallbackImageDiv = dataDiv.querySelector('.post-image');
      const titleDiv = dataDiv.querySelector('.post-title');
      const descriptionDiv = dataDiv.querySelector('.post-description');
      const urlDiv = dataDiv.querySelector('.post-url');
      const allImagesDiv = dataDiv.querySelector('.post-all-images');
      
      if (!titleDiv || !descriptionDiv || !urlDiv) return;
      
      const title = titleDiv.textContent;
      const description = descriptionDiv.textContent;
      const url = urlDiv.textContent;
      const fallbackImage = fallbackImageDiv ? fallbackImageDiv.textContent : '';

      // Start with header/preview image as first in cycle
      allPostImages = []; 
      if (fallbackImage) {
        allPostImages.push(fallbackImage);
      }

      // Then add all gallery images
      if (allImagesDiv && allImagesDiv.dataset.images) {
        try {
          const imagesData = JSON.parse(allImagesDiv.dataset.images);
          const galleryImages = imagesData.filter(imgUrl => imgUrl && typeof imgUrl === 'string');
          allPostImages = [...allPostImages, ...galleryImages];
        } catch (parseError) {
          console.warn('Failed to parse post_images for cycling:', parseError);
        }
      }
      
      if (allPostImages.length > 0 && infoboxImage) {
        infoboxImage.src = allPostImages[0];
      } else if (infoboxImage) {
        infoboxImage.src = ''; 
      }
      
      infoboxTitle.textContent = title || '';
      infoboxDescription.textContent = description || '';
      
      // Position infobox at cursor coordinates
      infobox.style.left = e.clientX + 'px';
      infobox.style.top = e.clientY + 'px';
      infobox.style.display = 'block';
      
      // Add bouncy animation
      infobox.classList.remove('animate-in');
      setTimeout(() => infobox.classList.add('animate-in'), 10);
      
      startImageCycling();
      
      this.classList.add('is-hovered');
      if (masonryGallery) masonryGallery.classList.add('has-hovered-item');
    });

    item.addEventListener('mouseleave', function() {
      stopImageCycling();
      if (infobox) {
        infobox.style.display = 'none';
        infobox.classList.remove('animate-in');
      }
      this.classList.remove('is-hovered');
      if (masonryGallery && document.querySelectorAll('.masonry-item.is-hovered').length === 0) {
        masonryGallery.classList.remove('has-hovered-item');
      }
    });
  });
  
  if (masonryGallery) {
    masonryGallery.addEventListener('mouseleave', function(e) {
      // Check if the mouse is leaving the gallery and not entering a child or the infobox itself
      if (e.relatedTarget && !e.relatedTarget.closest('.masonry-item') && e.relatedTarget !== infobox && !infobox.contains(e.relatedTarget)) {
        stopImageCycling();
        if (infobox) {
          infobox.style.display = 'none';
          infobox.classList.remove('animate-in');
        }
        document.querySelectorAll('.masonry-item.is-hovered').forEach(item => item.classList.remove('is-hovered'));
        masonryGallery.classList.remove('has-hovered-item');
      }
    });
  }
  
  if (masonryGallery && masonryGallery.classList.contains('masonry-varied')) {
    const grid = masonryGallery.querySelector('.masonry-grid');
    if (grid) { 
        const cols = getComputedStyle(grid).gridTemplateColumns.split(' ').length;
        const min = +masonryGallery.dataset.offsetMin || 0; 
        const max = +masonryGallery.dataset.offsetMax || 50;
        
        const minOffset = Math.max(0, min); 
        const maxOffset = Math.max(minOffset, max); 
        
        const offsets = Array.from({length: cols}, () =>
          Math.floor(Math.random() * (maxOffset - minOffset + 1)) + minOffset
        );

        offsets.forEach((off, i) => {
          const selector = `.masonry-item:nth-child(${cols}n+${i+1})`;
          grid.querySelectorAll(selector).forEach(item => {
            item.style.marginTop = `${off}px`; // Corrected template literal
          });
        });
    }
  }
});
</script>
