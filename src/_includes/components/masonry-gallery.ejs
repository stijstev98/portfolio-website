<!-- Masonry Gallery Component -->
<div class="masonry-gallery <%= locals.className ? className : '' %> <%= locals.variedColumns ? 'masonry-varied' : '' %>"
     data-offset-min="<%= locals.offsetMin || 0 %>"
     data-offset-max="<%= locals.offsetMax || 50 %>">
  <div class="masonry-grid">
    <% if (locals.posts && posts.length > 0) { %>
      <% posts.forEach(post => { %>
        <% 
          let aspectRatio = 'default-aspect';
          // Use preview image dimensions for aspect ratio calculation (prioritize preview over header)
          let imageWidth = post.data.previewImageWidth || post.data.headerImageWidth;
          let imageHeight = post.data.previewImageHeight || post.data.headerImageHeight;
          
          if (imageWidth && imageHeight) {
            const ratio = imageHeight / imageWidth;
            if (ratio < 0.8) aspectRatio = 'wide-aspect';
            else if (ratio > 1.2) aspectRatio = 'tall-aspect'; // Removed very-tall-aspect - cap at tall-aspect
            // Removed the very-tall check - extra tall images will use tall-aspect with center/crop
            if (ratio < 0.5) aspectRatio += ' very-wide-aspect';
          }
          
          // Determine media type and URL for the main display
          let mediaType = 'image';
          let mediaUrl = null;
          let mediaMimeType = null;
          let fallbackMediaUrl = null; // For the hidden data
          
          // Priority: post_preview_image > post_header_image > first gallery item
          if (post.data.previewImage) {
            mediaUrl = post.data.previewImage || post.data.previewImageMedium;
            fallbackMediaUrl = mediaUrl;
            // Check if preview image is actually a video
            if (post.data.previewImageMime && post.data.previewImageMime.startsWith('video/')) {
              mediaType = 'video';
              mediaMimeType = post.data.previewImageMime;
            }
          } else if (post.data.headerImage) {
            // Fallback to header image when preview image is not available
            mediaUrl = post.data.headerImage || post.data.headerImageMedium;
            fallbackMediaUrl = mediaUrl;
            // Check if header image is actually a video
            if (post.data.headerImageMime && post.data.headerImageMime.startsWith('video/')) {
              mediaType = 'video';
              mediaMimeType = post.data.headerImageMime;
            }
          } else if (post.data.images && post.data.images.length > 0) {
            // Final fallback to first gallery item
            const firstImage = post.data.images[0];
            mediaUrl = firstImage.url || firstImage.medium;
            fallbackMediaUrl = mediaUrl;
            // Check if first gallery item is a video
            if (firstImage.mime && firstImage.mime.startsWith('video/')) {
              mediaType = 'video';
              mediaMimeType = firstImage.mime;
            }
          }
        %>
        <div class="masonry-item <%= aspectRatio %>" 
             data-post-id="<%= post.id %>" 
             data-scroll-animation="fade-up"
             data-has-rich-content="<%= post.data.hasRichContent || false %>"
             data-lightbox-image="<%= fallbackMediaUrl || '' %>"
             data-lightbox-title="<%= post.data.title || '' %>"
             data-lightbox-description="<%= post.data.description || '' %>"
             data-lightbox-image-caption="<%= post.data.previewImageCaption || post.data.headerImageCaption || '' %>"
             data-lightbox-mime="<%= post.data.previewImageMime || post.data.headerImageMime || '' %>">
          <a href="<%= post.url %>" class="masonry-item-link" data-post-url="<%= post.url %>">
            <% if (mediaUrl) { %>
              <div class="masonry-item-image">
                <% if (mediaType === 'video') { %>
                  <video muted loop autoplay playsinline preload="metadata" loading="lazy">
                    <source src="<%= mediaUrl %>" type="<%= mediaMimeType %>">
                    <!-- Fallback for unsupported video -->
                    <img src="/images/video-placeholder.jpg" alt="<%= post.data.title %>" loading="lazy"/>
                  </video>
                <% } else { %>
                  <img src="<%= mediaUrl %>" alt="<%= post.data.title %>" loading="lazy"/>
                <% } %>
              </div>
            <% } %>
            <div class="masonry-item-overlay">
              <h3 class="masonry-item-title"><%= post.data.title %></h3>
            </div>
          </a>
          <div class="masonry-item-data" style="display: none;">
            <div class="post-image"><%= fallbackMediaUrl || '' %></div>
            <div class="post-title"><%= post.data.title %></div>
            <div class="post-description"><%= post.data.description || '' %></div>
            <div class="post-url"><%= post.url %></div>
            <div class="post-all-images" data-images='<%= JSON.stringify((post.data.images || []).map(img => ({ url: img.url || img.medium, mime: img.mime })).filter(item => item.url)) %>'></div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="masonry-empty">No posts available to display</div>
    <% } %>
  </div>
</div>

<!-- Render the hover infobox once outside the loop -->
<%- include('./hover_infobox', { 
  id: 'hover-infobox-masonry',
  image: '',
  title: '',
  description: '',
  url: '#',
  showImage: true,
  iconType: 'font-awesome',
  iconClass: 'fas fa-arrow-right',
  maxWidth: 'large'
}) %>

<!-- Include lightbox for posts without rich content -->
<%- include('./lightbox', { id: 'masonry-lightbox' }) %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const infobox = document.getElementById('hover-infobox-masonry');
  const lightbox = document.getElementById('masonry-lightbox');
  
  if (!infobox) return; 

  const infoboxImage = infobox.querySelector('.infobox-image img');
  const infoboxTitle = infobox.querySelector('.infobox-title');
  const infoboxDescription = infobox.querySelector('.infobox-description');
  const infoboxButton = infobox.querySelector('.infobox-go-button');
  const masonryGallery = document.querySelector('.masonry-gallery');
  
  if (!infoboxImage || !infoboxTitle || !infoboxDescription || !infoboxButton || !masonryGallery) {
    console.error('One or more critical infobox or gallery elements not found');
    return;
  }
  
  infobox.style.display = 'none';
  
  let currentImageIndex = 0;
  let allPostImages = []; 
  let imageInterval = null;
  const cycleDelay = 900; // reduced from 750ms

  function startImageCycling() {
    if (imageInterval) {
      clearInterval(imageInterval);
      imageInterval = null;
    }
    
    if (allPostImages && allPostImages.length > 0) {
      currentImageIndex = 0;
      setCurrentMediaInInfobox(currentImageIndex);

      if (allPostImages.length > 1) { 
        imageInterval = setInterval(() => {
          currentImageIndex = (currentImageIndex + 1) % allPostImages.length;
          setCurrentMediaInInfobox(currentImageIndex);
        }, cycleDelay);
      }
    }
  }
  
  function setCurrentMediaInInfobox(index) {
    if (!infoboxImage || !allPostImages[index]) return;
    
    const mediaItem = allPostImages[index];
    
    // Remove any existing video elements
    const existingVideo = infobox.querySelector('.infobox-image video');
    if (existingVideo) {
      existingVideo.remove();
    }
    
    if (mediaItem.type === 'video') {
      // Create video element for infobox
      const video = document.createElement('video');
      video.muted = true;
      video.loop = true;
      video.autoplay = true;
      video.playsInline = true;
      video.preload = 'metadata';
      video.style.cssText = 'width: 100%; height: 100%; object-fit: cover;';
      
      const source = document.createElement('source');
      source.src = mediaItem.url;
      source.type = mediaItem.mime || 'video/mp4';
      video.appendChild(source);
      
      // Hide the img and show video
      infoboxImage.style.display = 'none';
      infoboxImage.parentNode.appendChild(video);
    } else {
      // Show image
      infoboxImage.style.display = 'block';
      infoboxImage.src = mediaItem.url || '';
    }
  }
  
  function stopImageCycling() {
    if (imageInterval) {
      clearInterval(imageInterval);
      imageInterval = null;
    }
    
    // Clean up video elements
    const existingVideo = infobox.querySelector('.infobox-image video');
    if (existingVideo) {
      existingVideo.remove();
    }
    infoboxImage.style.display = 'block';
  }

  // Lightbox functionality
  function openLightbox(imageUrl, title, description, imageCaption, mimeType) {
    if (!lightbox) return;
    
    const mediaContainer = lightbox.querySelector('.lightbox-media-container');
    const caption = lightbox.querySelector('.lightbox-caption');
    
    if (!mediaContainer || !caption) return;
    
    // Clear existing content
    mediaContainer.innerHTML = '';
    
    const isVideo = mimeType && mimeType.startsWith('video/');
    
    if (isVideo) {
      // Create video element
      const video = document.createElement('video');
      video.src = imageUrl;
      video.className = 'lightbox-video';
      video.alt = title;
      video.muted = true;
      video.loop = true;
      video.autoplay = true;
      video.playsInline = true;
      video.preload = 'metadata';
      
      // Create video controls container
      const controlsContainer = document.createElement('div');
      controlsContainer.className = 'lightbox-video-controls';
      
      // Create pause/play button
      const playPauseBtn = document.createElement('button');
      playPauseBtn.className = 'lightbox-control-btn lightbox-pause-btn';
      playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
      playPauseBtn.title = 'Pause/Play';
      
      // Create mute/unmute button
      const muteBtn = document.createElement('button');
      muteBtn.className = 'lightbox-control-btn lightbox-mute-btn';
      muteBtn.innerHTML = '<i class="fas fa-volume-mute"></i>';
      muteBtn.title = 'Mute/Unmute';
      
      controlsContainer.appendChild(playPauseBtn);
      controlsContainer.appendChild(muteBtn);
      
      mediaContainer.appendChild(video);
      mediaContainer.appendChild(controlsContainer);
      
      // Control functionality
      playPauseBtn.addEventListener('click', function() {
        if (video.paused) {
          video.play();
          this.innerHTML = '<i class="fas fa-pause"></i>';
        } else {
          video.pause();
          this.innerHTML = '<i class="fas fa-play"></i>';
        }
      });
      
      muteBtn.addEventListener('click', function() {
        video.muted = !video.muted;
        if (video.muted) {
          this.innerHTML = '<i class="fas fa-volume-mute"></i>';
        } else {
          this.innerHTML = '<i class="fas fa-volume-up"></i>';
        }
      });
      
      // Update controls based on video state
      video.addEventListener('play', function() {
        playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
      });
      
      video.addEventListener('pause', function() {
        playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
      });
    } else {
      // Create image element
      const img = document.createElement('img');
      img.src = imageUrl;
      img.className = 'lightbox-image';
      img.alt = title;
      
      // Determine image orientation for proper sizing
      img.onload = function() {
        const aspectRatio = this.naturalWidth / this.naturalHeight;
        if (aspectRatio > 1.2) {
          this.setAttribute('data-orientation', 'landscape');
        } else if (aspectRatio < 0.8) {
          this.setAttribute('data-orientation', 'portrait');
        } else {
          this.setAttribute('data-orientation', 'square');
        }
      };
      
      mediaContainer.appendChild(img);
    }
    
    // Build caption content
    let captionHtml = '';
    if (title) {
      captionHtml += `<h4 style="margin: 0 0 0.5rem 0; font-family: var(--title-font); font-size: 1.3rem; font-weight: 600;">${title}</h4>`;
    }
    if (description) {
      captionHtml += `<p style="margin: 0 0 0.5rem 0; font-size: 1rem; opacity: 0.9;">${description}</p>`;
    }
    if (imageCaption) {
      captionHtml += `<p style="margin: 0; font-size: 0.8rem; opacity: 0.7; font-style: italic;">${imageCaption}</p>`;
    }
    
    caption.innerHTML = captionHtml;
    
    // Lock scrolling
    document.body.classList.add('lightbox-active');
    
    // Show lightbox
    lightbox.style.display = 'flex';
    setTimeout(() => lightbox.classList.add('show'), 10);
  }
  
  function closeLightbox() {
    if (!lightbox) return;
    
    lightbox.classList.remove('show');
    setTimeout(() => {
      lightbox.style.display = 'none';
      // Unlock scrolling
      document.body.classList.remove('lightbox-active');
    }, 300);
  }
  
  // Lightbox event listeners
  if (lightbox) {
    const overlay = lightbox.querySelector('.lightbox-overlay');
    const closeBtn = lightbox.querySelector('.lightbox-close');
    
    if (overlay) {
      overlay.addEventListener('click', closeLightbox);
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', closeLightbox);
    }
    
    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && lightbox.classList.contains('show')) {
        closeLightbox();
      }
    });
  }

  document.addEventListener('mousemove', function(e) {
    if (infobox.style.display !== 'none') {
      const infoboxContent = infobox.querySelector('.infobox-content');
      
      if (infoboxContent) {
        // The cursor should be at the top-left of the content box.
        // We calculate the content box's offset relative to the main infobox container
        // and subtract it from the cursor's position.
        const offsetX = infoboxContent.offsetLeft;
        const offsetY = infoboxContent.offsetTop;

        infobox.style.left = (e.clientX - offsetX) + 'px';
        infobox.style.top = (e.clientY - offsetY) + 'px';
      } else {
        // Fallback to original behavior
        infobox.style.left = e.clientX + 'px';
        infobox.style.top = e.clientY + 'px';
      }
    }
  });

  const masonryItems = document.querySelectorAll('.masonry-item');
  masonryItems.forEach(item => {
    // Handle clicks for posts without rich content
    const link = item.querySelector('.masonry-item-link');
    if (link) {
      link.addEventListener('click', function(e) {
        const hasRichContent = item.dataset.hasRichContent === 'true';
        
        if (!hasRichContent) {
          e.preventDefault(); // Prevent navigation
          
          const imageUrl = item.dataset.lightboxImage;
          const title = item.dataset.lightboxTitle;
          const description = item.dataset.lightboxDescription;
          const imageCaption = item.dataset.lightboxImageCaption;
          const mimeType = item.dataset.lightboxMime;
          
          if (imageUrl) {
            openLightbox(imageUrl, title, description, imageCaption, mimeType);
          }
        }
        // If hasRichContent is true, let the default navigation happen
      });
    }

    item.addEventListener('mouseenter', function(e) {
      // Configure infobox for this specific gallery type
      if (infobox) {
        infobox.dataset.iconType = 'font-awesome';
        const iconElement = infobox.querySelector('.infobox-go-button i');
        if (iconElement) {
          const hasRichContent = item.dataset.hasRichContent === 'true';
          if (hasRichContent) {
            iconElement.className = 'fas fa-arrow-right'; // Arrow for posts with rich content
          } else {
            iconElement.className = 'fas fa-expand'; // Expand icon for lightbox posts
          }
        }
        const contentBox = infobox.querySelector('.infobox-content');
        if (contentBox) {
          contentBox.classList.remove('no-title'); // Ensure no-title styling is removed
        }
      }

      const dataDiv = this.querySelector('.masonry-item-data');
      if (!dataDiv) return;
      
      const fallbackImageDiv = dataDiv.querySelector('.post-image');
      const titleDiv = dataDiv.querySelector('.post-title');
      const descriptionDiv = dataDiv.querySelector('.post-description');
      const urlDiv = dataDiv.querySelector('.post-url');
      const allImagesDiv = dataDiv.querySelector('.post-all-images');
      
      if (!titleDiv || !descriptionDiv || !urlDiv) return;
      
      const title = titleDiv.textContent;
      const description = descriptionDiv.textContent;
      const url = urlDiv.textContent;
      const fallbackImage = fallbackImageDiv ? fallbackImageDiv.textContent : '';

      // Start with header/preview image as first in cycle
      allPostImages = []; 
      if (fallbackImage) {
        allPostImages.push({ url: fallbackImage, type: 'image' });
      }

      // Then add all gallery images/videos
      if (allImagesDiv && allImagesDiv.dataset.images) {
        try {
          const imagesData = JSON.parse(allImagesDiv.dataset.images);
          const galleryItems = imagesData.map(item => {
            if (typeof item === 'string') {
              // Legacy format - just URL string
              return { url: item, type: 'image' };
            } else if (item && typeof item === 'object') {
              // New format with mime type support
              return {
                url: item.url,
                type: item.mime && item.mime.startsWith('video/') ? 'video' : 'image',
                mime: item.mime
              };
            }
            return null;
          }).filter(Boolean);
          
          allPostImages = [...allPostImages, ...galleryItems];
        } catch (parseError) {
          console.warn('Failed to parse post_images for cycling:', parseError);
        }
      }
      
      if (allPostImages.length > 0) {
        setCurrentMediaInInfobox(0);
      } else if (infoboxImage) {
        infoboxImage.src = ''; 
      }
      
      infoboxTitle.textContent = title || '';
      infoboxDescription.textContent = description || '';
      
      // Position infobox at cursor coordinates
      infobox.style.left = e.clientX + 'px';
      infobox.style.top = e.clientY + 'px';
      infobox.style.display = 'block';
      
      // Add bouncy animation
      infobox.classList.remove('animate-in');
      setTimeout(() => infobox.classList.add('animate-in'), 10);
      
      startImageCycling();
      
      this.classList.add('is-hovered');
      if (masonryGallery) masonryGallery.classList.add('has-hovered-item');
    });

    item.addEventListener('mouseleave', function() {
      stopImageCycling();
      if (infobox) {
        infobox.style.display = 'none';
        infobox.classList.remove('animate-in');
      }
      this.classList.remove('is-hovered');
      if (masonryGallery && document.querySelectorAll('.masonry-item.is-hovered').length === 0) {
        masonryGallery.classList.remove('has-hovered-item');
      }
    });
  });
  
  if (masonryGallery) {
    masonryGallery.addEventListener('mouseleave', function(e) {
      // Check if the mouse is leaving the gallery and not entering a child or the infobox itself
      if (e.relatedTarget && !e.relatedTarget.closest('.masonry-item') && e.relatedTarget !== infobox && !infobox.contains(e.relatedTarget)) {
        stopImageCycling();
        if (infobox) {
          infobox.style.display = 'none';
          infobox.classList.remove('animate-in');
        }
        document.querySelectorAll('.masonry-item.is-hovered').forEach(item => item.classList.remove('is-hovered'));
        masonryGallery.classList.remove('has-hovered-item');
      }
    });
  }
  
  if (masonryGallery && masonryGallery.classList.contains('masonry-varied')) {
    const grid = masonryGallery.querySelector('.masonry-grid');
    if (grid) { 
        const cols = getComputedStyle(grid).gridTemplateColumns.split(' ').length;
        const min = +masonryGallery.dataset.offsetMin || 0; 
        const max = +masonryGallery.dataset.offsetMax || 50;
        
        const minOffset = Math.max(0, min); 
        const maxOffset = Math.max(minOffset, max); 
        
        const offsets = Array.from({length: cols}, () =>
          Math.floor(Math.random() * (maxOffset - minOffset + 1)) + minOffset
        );

        offsets.forEach((off, i) => {
          const selector = `.masonry-item:nth-child(${cols}n+${i+1})`;
          grid.querySelectorAll(selector).forEach(item => {
            item.style.marginTop = `${off}px`; // Corrected template literal
          });
        });
    }
  }
  
  // Initialize video elements for better performance
  const videos = document.querySelectorAll('.masonry-item video');
  videos.forEach(video => {
    video.addEventListener('loadeddata', function() {
      this.setAttribute('data-loaded', 'true');
    });
    
    video.addEventListener('error', function() {
      console.warn('Video failed to load:', this.src);
      // Optionally hide or replace with placeholder
      const placeholder = this.parentElement.querySelector('img');
      if (placeholder) {
        this.style.display = 'none';
        placeholder.style.display = 'block';
      }
    });
  });
});
</script>
