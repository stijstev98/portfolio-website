<div class="nav-container">
  <!-- Desktop Navigation -->
  <nav class="header-nav">
    <% navigation.main.forEach(item => { %>
      <% if (item.scrollTarget && page.url === '/') { %>
        <a href="#<%= item.scrollTarget %>" data-scroll-target="<%= item.scrollTarget %>" <% if(item.emphasis) { %>class="btn-outline scroll-link"<% } else { %>class="scroll-link"<% } %>><%= item.text %></a>
      <% } else { %>
        <a href="<%= item.url %>" <% if(item.emphasis) { %>class="btn-outline"<% } %>><%= item.text %></a>
      <% } %>
    <% }); %>
  </nav>
  
  <!-- Hamburger Menu Toggle Button -->
  <div class="hamburger-menu" id="hamburgerToggle">
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
    <span class="hamburger-line"></span>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu toggle functionality
    const hamburger = document.getElementById('hamburgerToggle');
    const mobileMenu = document.querySelector('.mobile-menu');
    const menuOverlay = document.querySelector('.menu-overlay');
    
    if (hamburger) {
      hamburger.addEventListener('click', (e) => {
        // Dispatch toggle event to open/close the mobile menu
        document.dispatchEvent(new CustomEvent('toggleMobileMenu'));
        // Toggle active state on hamburger icon
        hamburger.classList.toggle('active');
        // Prevent event bubbling
        e.stopPropagation();
      });
    }
    
    // Sticky navigation behavior for regular pages
    const navLinks = document.querySelector('.header-nav');
    
    // Only set up the observer if not in the hero section
    if (navLinks && !document.querySelector('.hero-section')) {
      const navObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (!entry.isIntersecting) {
            navLinks.classList.add('sticky');
          } else {
            navLinks.classList.remove('sticky');
          }
        });
      }, { rootMargin: '-48px 0px 0px 0px' });
      
      navObserver.observe(navLinks);
    }
    
    // Listen for mobile menu close events to update hamburger state
    document.addEventListener('mobilemenuclose', () => {
      const hamburgers = document.querySelectorAll('.hamburger-menu');
      hamburgers.forEach(h => h.classList.remove('active'));
    });
    
    // Scroll functionality for navigation items
    const scrollLinks = document.querySelectorAll('.scroll-link');
    scrollLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-scroll-target');
        const targetElement = document.getElementById(targetId);
        
        // Notify that navigation scroll is starting - disables scroll hack
        document.dispatchEvent(new CustomEvent('navScrollStarted'));
        
        // Close mobile menu if open
        document.dispatchEvent(new CustomEvent('mobilemenuclose'));
        
        if (targetElement) {
          // Smooth scroll to the target element
          window.scrollTo({
            top: targetElement.offsetTop - 100, // Add some offset to avoid hiding under header
            behavior: 'smooth'
          });
        } else if (targetId === 'masonry-gallery') {
          // If masonry gallery isn't found by ID, try finding it by class
          const galleryElement = document.querySelector('.front-page-gallery');
          if (galleryElement) {
            window.scrollTo({
              top: galleryElement.offsetTop - 100,
              behavior: 'smooth'
            });
          }
        }
      });
    });
  });
</script>